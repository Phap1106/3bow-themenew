import { LeadsService } from "./leads.service";
import { CreateLeadDto } from "./dto/create-lead.dto";
import { ListLeadDto } from "./dto/list-lead.dto";
import { UpdateLeadDto } from "./dto/update-lead.dto";
import { Request } from "express";
export declare class LeadsController {
    private readonly leadsService;
    constructor(leadsService: LeadsService);
    create(dto: CreateLeadDto, req: Request): Promise<{
        id: string;
        email: string | null;
        phone: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        ip: string | null;
        userAgent: string | null;
        url: string | null;
        service: import(".prisma/client").$Enums.ServiceType | null;
        serviceText: string | null;
        budget: import(".prisma/client").$Enums.BudgetRange | null;
        note: string | null;
        consent: boolean;
        channel: import(".prisma/client").$Enums.LeadChannel;
        utmSource: string | null;
        utmMedium: string | null;
        utmCampaign: string | null;
        utmTerm: string | null;
        utmContent: string | null;
        referrer: string | null;
        pagePath: string | null;
        status: import(".prisma/client").$Enums.LeadStatus;
        assignedToId: string | null;
    }>;
    findAll(q: ListLeadDto): Promise<{
        items: {
            id: string;
            email: string | null;
            phone: string;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            ip: string | null;
            userAgent: string | null;
            url: string | null;
            service: import(".prisma/client").$Enums.ServiceType | null;
            serviceText: string | null;
            budget: import(".prisma/client").$Enums.BudgetRange | null;
            note: string | null;
            consent: boolean;
            channel: import(".prisma/client").$Enums.LeadChannel;
            utmSource: string | null;
            utmMedium: string | null;
            utmCampaign: string | null;
            utmTerm: string | null;
            utmContent: string | null;
            referrer: string | null;
            pagePath: string | null;
            status: import(".prisma/client").$Enums.LeadStatus;
            assignedToId: string | null;
        }[];
        total: number;
        page: number;
        pageSize: number;
        totalPages: number;
    }>;
    findOne(id: string): Promise<{
        id: string;
        email: string | null;
        phone: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        ip: string | null;
        userAgent: string | null;
        url: string | null;
        service: import(".prisma/client").$Enums.ServiceType | null;
        serviceText: string | null;
        budget: import(".prisma/client").$Enums.BudgetRange | null;
        note: string | null;
        consent: boolean;
        channel: import(".prisma/client").$Enums.LeadChannel;
        utmSource: string | null;
        utmMedium: string | null;
        utmCampaign: string | null;
        utmTerm: string | null;
        utmContent: string | null;
        referrer: string | null;
        pagePath: string | null;
        status: import(".prisma/client").$Enums.LeadStatus;
        assignedToId: string | null;
    } | null>;
    update(id: string, dto: UpdateLeadDto): Promise<{
        id: string;
        email: string | null;
        phone: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        ip: string | null;
        userAgent: string | null;
        url: string | null;
        service: import(".prisma/client").$Enums.ServiceType | null;
        serviceText: string | null;
        budget: import(".prisma/client").$Enums.BudgetRange | null;
        note: string | null;
        consent: boolean;
        channel: import(".prisma/client").$Enums.LeadChannel;
        utmSource: string | null;
        utmMedium: string | null;
        utmCampaign: string | null;
        utmTerm: string | null;
        utmContent: string | null;
        referrer: string | null;
        pagePath: string | null;
        status: import(".prisma/client").$Enums.LeadStatus;
        assignedToId: string | null;
    }>;
    markSpam(id: string): Promise<{
        id: string;
        email: string | null;
        phone: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        ip: string | null;
        userAgent: string | null;
        url: string | null;
        service: import(".prisma/client").$Enums.ServiceType | null;
        serviceText: string | null;
        budget: import(".prisma/client").$Enums.BudgetRange | null;
        note: string | null;
        consent: boolean;
        channel: import(".prisma/client").$Enums.LeadChannel;
        utmSource: string | null;
        utmMedium: string | null;
        utmCampaign: string | null;
        utmTerm: string | null;
        utmContent: string | null;
        referrer: string | null;
        pagePath: string | null;
        status: import(".prisma/client").$Enums.LeadStatus;
        assignedToId: string | null;
    }>;
}
